{
    "swagger": "2.0",
    "info": {
        "description": "API for online catalog of PC components.",
        "title": "Offliner API",
        "contact": {
            "name": "Evdokimov Igor",
            "url": "https://t.me/epelptic"
        },
        "version": "1.0.0"
    },
    "basePath": "/v1",
    "paths": {
        "/auth/logout": {
            "post": {
                "description": "Logs out the user by clearing the refresh token cookie. If the cookie is not found, returns success without any action.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "User successfully logged out or no refresh token found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "No content, token was successfully invalidated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "post": {
                "description": "Refreshes the access token using the provided refresh token from cookies.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh Access Token",
                "responses": {
                    "200": {
                        "description": "Successfully refreshed access token",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Invalid, missing or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/sign-in": {
            "post": {
                "description": "Create access and refresh token and return them to the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User SignIn",
                "parameters": [
                    {
                        "description": "User login details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UserSingInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully signed in",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Invalid Password or Email",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "User email is not confirmed",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/sign-up": {
            "post": {
                "description": "Registers a new user with the provided email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User SignUp",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UserSignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully created",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "409": {
                        "description": "Conflict - User with this email already exists",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/{provider}": {
            "get": {
                "description": "Redirects the user to the OAuth provider for authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User SignWithOauth",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"google\" or \"yandex\"",
                        "description": "OAuth provider DON'T WORK IN SWAGGER!!!",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "307": {
                        "description": "Redirecting to provider"
                    },
                    "400": {
                        "description": "Provider not supported",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/{provider}/callback": {
            "get": {
                "description": "Handles the callback from the OAuth provider after the user has authorized the app. THIS ENDPOINT IS CALLED BY THE OAUTH PROVIDER, NOT THE FRONTEND!!!",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "OAuth2 Callback Handler",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"google\" or \"yandex\"",
                        "description": "OAuth provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"randomstate123\"",
                        "description": "State parameter sent during OAuth authorization",
                        "name": "state",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"authorizationcode123\"",
                        "description": "Authorization code returned by OAuth provider",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User already exists, successfully authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "201": {
                        "description": "New user created and successfully authenticated",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Provider not supported or invalid state",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/confirm/email": {
            "put": {
                "description": "Validate confirmed code and is it confirmed update email_status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Confirmations"
                ],
                "summary": "Confirmation email address",
                "parameters": [
                    {
                        "description": "data for confirmed email",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.EmailConfirmedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success email confirmation",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error email confirmation",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/confirm/send-email-code": {
            "post": {
                "description": "Generate code for confirmation email and send this to email. This endpoint have rate 1 req in 1 min",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Confirmations"
                ],
                "summary": "Send code for confirmation email",
                "parameters": [
                    {
                        "description": "Email пользователя для подтверждения",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.SendConfirmedEmailCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Код подтверждения успешно отправлен",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации или неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/user/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes the currently authenticated user based on the user ID retrieved from the request context.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Delete user",
                "responses": {
                    "200": {
                        "description": "User successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/user/edit": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates user profile details including name, surname, patronymic, date of birth, phone number, gender, and avatar.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Update User Profile",
                "parameters": [
                    {
                        "description": "User profile data",
                        "name": "json",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserRequest"
                        }
                    },
                    {
                        "type": "file",
                        "description": "Avatar image file (optional)",
                        "name": "avatar",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile updated successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the profile details of the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get User Profile",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.EmailConfirmedRequest": {
            "type": "object",
            "required": [
                "code",
                "email"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "54JK64"
                },
                "email": {
                    "type": "string",
                    "example": "jon.doe@gmail.com"
                }
            }
        },
        "handlers.SendConfirmedEmailCodeRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jon.doe@gmail.com"
                }
            }
        },
        "handlers.UpdateUserRequest": {
            "type": "object",
            "required": [
                "reset_avatar"
            ],
            "properties": {
                "date_of_birth": {
                    "type": "string",
                    "example": "1985-04-12T00:00:00Z"
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "male",
                        "female"
                    ],
                    "example": "male"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Doe"
                },
                "patronymic": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "Smith"
                },
                "phone_number": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "reset_avatar": {
                    "type": "boolean",
                    "example": false
                },
                "surname": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "example": "John"
                }
            }
        },
        "handlers.UserSignUpRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jon.doe@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "SuperPassword123"
                }
            }
        },
        "handlers.UserSingInRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jon.doe@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "SuperPassword123"
                }
            }
        },
        "response.Response": {
            "description": "Structure for a standard API response",
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": "any error"
                },
                "status": {
                    "type": "string",
                    "example": "success/error"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}