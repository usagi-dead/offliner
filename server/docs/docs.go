// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/email-confirm": {
            "post": {
                "description": "Validate confirmed code and is it confirmed update email_status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Confirmation email address",
                "parameters": [
                    {
                        "description": "data for confirmed email",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.EmailConfirmedRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success email confirmation",
                        "schema": {
                            "$ref": "#/definitions/auth.UserSignUpResponse"
                        }
                    },
                    "400": {
                        "description": "Error email confirmation"
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/email/send-confirm-code": {
            "post": {
                "description": "Генерирует код подтверждения и отправляет его на указанный email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Отправка кода подтверждения на email",
                "parameters": [
                    {
                        "description": "Email пользователя для подтверждения",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SendConfirmedEmailCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Код подтверждения успешно отправлен",
                        "schema": {
                            "$ref": "#/definitions/auth.UserSignUpResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации или неверный запрос",
                        "schema": {
                            "$ref": "#/definitions/auth.ValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/auth.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "post": {
                "description": "Refreshes the access token using the provided refresh token from cookies.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh Access Token",
                "responses": {
                    "200": {
                        "description": "Successfully refreshed access token",
                        "schema": {
                            "$ref": "#/definitions/auth.SingInResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid or missing refresh token",
                        "schema": {
                            "$ref": "#/definitions/auth.UnauthorizedResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/sign-in": {
            "post": {
                "description": "Create access and refresh token and return them to the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign In User",
                "parameters": [
                    {
                        "description": "User login details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SingInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully signed in",
                        "schema": {
                            "$ref": "#/definitions/auth.SingInResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/auth.ValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid Password or Email",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User email is not confirmed",
                        "schema": {
                            "$ref": "#/definitions/auth.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/sign-up": {
            "post": {
                "description": "Creates a new user account with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign Up User",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.UserSignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully registered",
                        "schema": {
                            "$ref": "#/definitions/auth.UserSignUpResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or validation error",
                        "schema": {
                            "$ref": "#/definitions/auth.ValidationErrorResponse"
                        }
                    },
                    "409": {
                        "description": "User with this email already exists",
                        "schema": {
                            "$ref": "#/definitions/auth.ConflictErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/{provider}": {
            "get": {
                "description": "Redirects the user to the OAuth provider for authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Start OAuth2 Authorization",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"google or yandex\"",
                        "description": "OAuth provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "307": {
                        "description": "Перенаправление к провайдеру"
                    },
                    "404": {
                        "description": "Provider not supported",
                        "schema": {
                            "$ref": "#/definitions/auth.NotSupportedProviderResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/auth.InternalServerErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/avatar": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the avatar image based on the filename provided in the query parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Get User Avatar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filename of the avatar image",
                        "name": "filename",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Avatar image",
                        "schema": {
                            "type": "file"
                        }
                    }
                }
            }
        },
        "/user/complete-profile": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates user profile details such as name, surname, patronymic, date of birth, phone number, gender, and avatar.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Update User Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User profile data JSON",
                        "name": "json",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Avatar image file",
                        "name": "avatar",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/profile.CompleteProfileResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.ConflictErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "user with this email already sign-up"
                },
                "status": {
                    "type": "string",
                    "example": "Error"
                }
            }
        },
        "auth.EmailConfirmedRequest": {
            "type": "object",
            "required": [
                "code",
                "email"
            ],
            "properties": {
                "code": {
                    "type": "string",
                    "example": "54JK64"
                },
                "email": {
                    "type": "string",
                    "example": "jon.doe@gmail.com"
                }
            }
        },
        "auth.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid Password or Email"
                },
                "status": {
                    "type": "string",
                    "example": "Error"
                }
            }
        },
        "auth.InternalServerErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "failed to sign up"
                },
                "status": {
                    "type": "string",
                    "example": "Error"
                }
            }
        },
        "auth.NotSupportedProviderResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "provider not supported"
                },
                "status": {
                    "type": "string",
                    "example": "Error"
                }
            }
        },
        "auth.SendConfirmedEmailCodeRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jon.doe@gmail.com"
                }
            }
        },
        "auth.SingInRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jon.doe@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "SuperPassword123"
                }
            }
        },
        "auth.SingInResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "asdfasdfahgwea94i5)()(\u0026_.KJFDI{.sadfasdIOSDJ"
                },
                "status": {
                    "type": "string",
                    "example": "OK"
                }
            }
        },
        "auth.UnauthorizedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "unauthorized"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "auth.UserSignUpRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jon.doe@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "SuperPassword123"
                }
            }
        },
        "auth.UserSignUpResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "OK"
                }
            }
        },
        "auth.ValidationErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "field Email is not a valid Email, field Password is a required field"
                },
                "status": {
                    "type": "string",
                    "example": "Error"
                }
            }
        },
        "profile.CompleteProfileResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Offliner API",
	Description:      "REST API для приложения Offliner",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
