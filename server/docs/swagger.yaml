basePath: /v1
definitions:
  handlers.EmailConfirmedRequest:
    properties:
      code:
        example: 54JK64
        type: string
      email:
        example: jon.doe@gmail.com
        type: string
    required:
    - code
    - email
    type: object
  handlers.SendConfirmedEmailCodeRequest:
    properties:
      email:
        example: jon.doe@gmail.com
        type: string
    required:
    - email
    type: object
  handlers.UpdateUserRequest:
    properties:
      date_of_birth:
        example: "1985-04-12T00:00:00Z"
        type: string
      gender:
        enum:
        - male
        - female
        example: male
        type: string
      name:
        example: Doe
        maxLength: 50
        minLength: 1
        type: string
      patronymic:
        example: Smith
        maxLength: 50
        minLength: 1
        type: string
      phone_number:
        example: "+1234567890"
        type: string
      reset_avatar:
        example: false
        type: boolean
      surname:
        example: John
        maxLength: 50
        minLength: 1
        type: string
    required:
    - reset_avatar
    type: object
  handlers.UserSignUpRequest:
    properties:
      email:
        example: jon.doe@gmail.com
        type: string
      password:
        example: SuperPassword123
        type: string
    required:
    - email
    - password
    type: object
  handlers.UserSingInRequest:
    properties:
      email:
        example: jon.doe@gmail.com
        type: string
      password:
        example: SuperPassword123
        type: string
    required:
    - email
    - password
    type: object
  response.Response:
    description: Structure for a standard API response
    properties:
      data: {}
      error:
        example: any error
        type: string
      status:
        example: success/error
        type: string
    type: object
info:
  contact:
    name: Evdokimov Igor
    url: https://t.me/epelptic
  description: API for online catalog of PC components.
  title: Offliner API
  version: 1.0.0
paths:
  /auth/{provider}:
    get:
      consumes:
      - application/json
      description: Redirects the user to the OAuth provider for authentication.
      parameters:
      - description: OAuth provider DON'T WORK IN SWAGGER!!!
        example: '"google" or "yandex"'
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "307":
          description: Redirecting to provider
        "400":
          description: Provider not supported
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User SignWithOauth
      tags:
      - Authentication
  /auth/{provider}/callback:
    get:
      consumes:
      - application/json
      description: Handles the callback from the OAuth provider after the user has
        authorized the app. THIS ENDPOINT IS CALLED BY THE OAUTH PROVIDER, NOT THE
        FRONTEND!!!
      parameters:
      - description: OAuth provider
        example: '"google" or "yandex"'
        in: path
        name: provider
        required: true
        type: string
      - description: State parameter sent during OAuth authorization
        example: '"randomstate123"'
        in: query
        name: state
        required: true
        type: string
      - description: Authorization code returned by OAuth provider
        example: '"authorizationcode123"'
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User already exists, successfully authenticated
          schema:
            $ref: '#/definitions/response.Response'
        "201":
          description: New user created and successfully authenticated
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Provider not supported or invalid state
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: OAuth2 Callback Handler
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out the user by clearing the refresh token cookie. If the
        cookie is not found, returns success without any action.
      produces:
      - application/json
      responses:
        "200":
          description: User successfully logged out or no refresh token found
          schema:
            $ref: '#/definitions/response.Response'
        "204":
          description: No content, token was successfully invalidated
          schema:
            $ref: '#/definitions/response.Response'
      summary: Logout user
      tags:
      - Authentication
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refreshes the access token using the provided refresh token from
        cookies.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed access token
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Invalid, missing or expired refresh token
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Refresh Access Token
      tags:
      - Authentication
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Create access and refresh token and return them to the user
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UserSingInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User successfully signed in
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request payload or validation error
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Invalid Password or Email
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: User email is not confirmed
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User SignIn
      tags:
      - Authentication
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided email and password.
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UserSignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully created
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Validation error or invalid request payload
          schema:
            $ref: '#/definitions/response.Response'
        "409":
          description: Conflict - User with this email already exists
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: User SignUp
      tags:
      - Authentication
  /confirm/email:
    put:
      consumes:
      - application/json
      description: Validate confirmed code and is it confirmed update email_status
      parameters:
      - description: data for confirmed email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.EmailConfirmedRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success email confirmation
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error email confirmation
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Confirmation email address
      tags:
      - Confirmations
  /confirm/send-email-code:
    post:
      consumes:
      - application/json
      description: Generate code for confirmation email and send this to email. This
        endpoint have rate 1 req in 1 min
      parameters:
      - description: Email пользователя для подтверждения
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.SendConfirmedEmailCodeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Код подтверждения успешно отправлен
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Ошибка валидации или неверный запрос
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send code for confirmation email
      tags:
      - Confirmations
  /user/delete:
    delete:
      consumes:
      - application/json
      description: Deletes the currently authenticated user based on the user ID retrieved
        from the request context.
      produces:
      - application/json
      responses:
        "200":
          description: User successfully deleted
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized or invalid user ID
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Profile
  /user/edit:
    put:
      consumes:
      - multipart/form-data
      description: Updates user profile details including name, surname, patronymic,
        date of birth, phone number, gender, and avatar.
      parameters:
      - description: User profile data
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      - description: Avatar image file (optional)
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: User profile updated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or validation error
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized user
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Update User Profile
      tags:
      - Profile
  /user/me:
    get:
      description: Retrieves the profile details of the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized user
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: Get User Profile
      tags:
      - Profile
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
